name: build native android libraries
on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
      
  pull_request:
    types: [opened, synchronize, reopened]  
    
  workflow_dispatch:
  
permissions:
  contents: read

env:
    BASEDIR: /__w/libpjsua2maui/libpjsua2maui
    #BCG729_PATH:  ${{ env.BASEDIR }}/lib/bcg729
    #OPENSSL_PATH: ${{ env.BASEDIR }}/lib/openssl
    #OPUS_PATH: ${{ env.BASEDIR }}/lib/opus
    #PJSIP_PATH: ${{ env.BASEDIR }}/lib/pjsip
    PJSIP_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/pjsip-build-output
    SWIG_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/swig-build-output
    OPENSSL_BUILD_OUT_PATH:  ${{ github.workspace }}/outputs/openssl-build-output
    OPENSSL_TARGET_NDK_LEVEL: 21
   
    OPUS_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/opus-build-output
    BCG729_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/bcg729-build-output
    ANDROID_BUILD_TOOLS: "34.0.0"
    TARGET_ANDROID_API: 21
    OPENH264_TMP_DIR: /tmp/openh264
jobs:
  pj-plus-third-party:
    strategy:
      matrix:
        arch: [x86, x86_64, armeabi-v7a, arm64-v8a]
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye
    name: pjsip + third party libs 
    permissions:
      contents: write
    steps:
    
    - name: Install Git
      run: |
        apt-get update
        apt-get install -y git
        git --version 
   
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: 'true'
       
    - name: Instalar pacotes essenciais
      run: |
        apt-get update
        apt-get install -y build-essential curl unzip git
 
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        check-latest: true
    
    - name: Set up Android SDK
      id: setup-sdk
      run: |
        # Define variables
        ANDROID_SDK_ROOT=$HOME/android-sdk
        CMDLINE_TOOLS_VERSION=11076708
        API_LEVEL=21
        BUILD_TOOLS_VERSION=34.0.0

        # Create directories
        mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
        mkdir -p "$ANDROID_SDK_ROOT/platforms"
        mkdir -p "$ANDROID_SDK_ROOT/build-tools"

        # Download and set up cmdline-tools
        curl -o sdk-tools.zip "https://dl.google.com/android/repository/commandlinetools-linux-${CMDLINE_TOOLS_VERSION}_latest.zip"
        unzip sdk-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
        mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        rm sdk-tools.zip

        # Update and install platform-tools and build-tools
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-${API_LEVEL}" \
          "build-tools;${BUILD_TOOLS_VERSION}"

        # Export paths
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:\$PATH" >> $GITHUB_ENV
        
        # Output paths
        echo "android_sdk_root=$ANDROID_SDK_ROOT" >> $GITHUB_OUTPUT
        echo "cmdline_tools_path=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_OUTPUT
        echo "platform_tools_path=$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_OUTPUT
 
    - name: Verify Android SDK installation
      shell: bash
      run: |
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list
        ls -R $ANDROID_SDK_ROOT
      
    - name: Download and Setup Android NDK
      id: setup-ndk
      shell: bash
      run: |
        # Define variables
        ANDROID_SDK_ROOT=$HOME/android-sdk
        ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/r25c
        NDK_VERSION=r25c
    
        # Create directories
        echo "Creating directories for SDK and NDK..."
        mkdir -p "$ANDROID_SDK_ROOT"
        mkdir -p "$ANDROID_NDK_ROOT"
    
        # Download and extract Android NDK
        echo "Downloading Android NDK $NDK_VERSION..."
        curl -L -o android-ndk.zip https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip
        echo "Extracting Android NDK..."
        unzip android-ndk.zip -d "$ANDROID_NDK_ROOT"
        rm android-ndk.zip
    
        # Set NDK paths and export them
        export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT/android-ndk-$NDK_VERSION
        echo "NDK_HOME=$ANDROID_NDK_HOME"
        echo "ndk-path=$ANDROID_NDK_HOME" >> $GITHUB_OUTPUT
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
        echo "PATH=$ANDROID_NDK_HOME:\$PATH" >> $GITHUB_ENV
      
    - name: Debug NDK Setup
      shell: bash
      run: |
        echo "NDK Path: ${{ steps.setup-ndk.outputs.ndk-path }}"
        ls -R ${{ steps.setup-ndk.outputs.ndk-path }} 

    - name: Install build tools
      shell: bash
      run: |
        DEPS="unzip git curl bzip2 binutils make autoconf openssl linux-libc-dev \
              libssl-dev libopus0 libpcre3 libpcre3-dev build-essential nasm python3 swig llvm clang"
        dpkg --add-architecture i386
        apt-get update && apt-get install -y ${DEPS}
  
    - name: Build OpenH264
      id: openh264
      shell: bash
      run: |
        TARGET=android-21
        ARCH=${{ matrix.arch }}

        # Diret√≥rio de build
        cd ${{ env.OPENH264_PATH }}

        case $ARCH in
          armeabi-v7a)
            make OS=android ARCH=arm TARGET=android SYSROOT=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
            APP_STL=c++_shared EXTRA_CFLAGS="-march=armv7-a --sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/arm-linux-androideabi" \
            NDKLEVEL=21 NDKROOT=$ANDROID_NDK_HOME
            ;;
          arm64-v8a)
            make OS=android ARCH=arm64 TARGET=android SYSROOT=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
            APP_STL=c++_shared EXTRA_CFLAGS="-march=armv8-a --sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android" \
            NDKLEVEL=21 NDKROOT=$ANDROID_NDK_HOME
            ;;
          x86)
            make OS=android ARCH=x86 TARGET=android SYSROOT=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
            APP_STL=c++_shared EXTRA_CFLAGS="-march=i686 --sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/i686-linux-android" \
            NDKLEVEL=21 NDKROOT=$ANDROID_NDK_HOME
            ;;
          x86_64)
            make OS=android ARCH=x86_64 TARGET=android SYSROOT=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
            APP_STL=c++_shared EXTRA_CFLAGS="-march=x86-64 --sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/x86_64-linux-android" \
            NDKLEVEL=21 NDKROOT=$ANDROID_NDK_HOME
            ;;
          *)
            echo "Unsupported architecture: $ARCH"
            exit 1
            ;;
        esac




      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        OPENH264_PATH: ${{ env.BASEDIR }}/lib/openh264
        BUILD_DIR: ${{ env.BASEDIR }}/outputs
        OPENH264_BUILD_OUT_PATH: ${{ env.BASEDIR }}/outputs/openh264-build-output
        OPENH264_TARGET_NDK_LEVEL: 21 
 
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openh264-${{ matrix.arch }}
        path: |
          ${{ env.OPENH264_PATH }}/lib
          ${{ env.OPENH264_PATH }}/include

        overwrite: true
      env:
        OPENH264_PATH: ${{ env.BASEDIR }}/lib/openh264