name: build native android libraries
on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
      
  pull_request:
    types: [opened, synchronize, reopened]  
    
  workflow_dispatch:
  
permissions:
  contents: read

env:
    BCG729_PATH:  ${{ github.workspace }}/lib/bcg729
    OPENH264_PATH: ${{ github.workspace }}/lib/openh264
    OPENSSL_PATH: ${{ github.workspace }}/lib/openssl
    OPUS_PATH: ${{ github.workspace }}/lib/opus
    PJSIP_PATH: ${{ github.workspace }}/lib/pjsip
    BUILD_DIR: ${{ github.workspace }}/outputs
    PJSIP_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/pjsip-build-output
    SWIG_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/swig-build-output
    OPENSSL_BUILD_OUT_PATH:  ${{ github.workspace }}/outputs/openssl-build-output
    OPENSSL_TARGET_NDK_LEVEL: 25
    OPENH264_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/openh264-build-output
    OPENH264_TARGET_NDK_LEVEL: 25
    OPUS_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/opus-build-output
    BCG729_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/bcg729-build-output
    ANDROID_BUILD_TOOLS: "34.0.0"
    TARGET_ANDROID_API: 25
    OPENH264_TMP_DIR: /tmp/openh264
jobs:
  third-part:
    strategy:
      matrix:
        arch: [x86, x86_64, armeabi-v7a, arm64-v8a]
    runs-on: ubuntu-latest
    name: third part libs
    permissions:
      contents: write
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: 'true'
           
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        check-latest: true
      
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708 
        packages: platforms;android-25 tools platform-tools build-tools;34.0.0
    
    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r25c
        add-to-path: true
        link-to-sdk: true
        local-cache: false
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}


    - name: Install build tools
      run: |
        DEPS="unzip git curl bzip2 binutils make autoconf openssl linux-libc-dev libc6-dev\
          libssl-dev libopus0 libpcre3 libpcre3-dev build-essential nasm python3 swig" 
        sudo sh -c "dpkg --add-architecture i386; apt-get update  && apt-get install -y ${DEPS}"
      shell: bash

    - name: Build OpenH264
      id: openh264
      run: |
        
        LIB_PATH=${{ env.OPENH264_BUILD_OUT_PATH }}/libs
        LOG_PATH=${{ env.OPENH264_BUILD_OUT_PATH }}/logs 
        if [ -d "${{ env.OPENH264_TMP_DIR }}" ]; then
          echo "Directory ${{ env.OPENH264_BUILD_OUT_PATH }} exists. Removing..."
          rm -rf ${{ env.OPENH264_BUILD_OUT_PATH }}
        else
            echo "Directory ${{ env.OPENH264_BUILD_OUT_PATH }} does not exist. Skipping removal."
        fi
        mkdir -p "${LIB_PATH}"
        mkdir -p "${LOG_PATH}"
        if [ -d "${{ env.OPENH264_TMP_DIR }}" ]; then
          echo "Directory ${{ env.OPENH264_TMP_DIR }} exists. Removing..."
          rm -rf ${{ env.OPENH264_TMP_DIR }}
        else
            echo "Directory ${{ env.OPENH264_TMP_DIR }} does not exist. Skipping removal."
        fi
        mkdir -p ${{ env.OPENH264_TMP_DIR }}
        cd ${{ env.OPENH264_PATH }}
        cp -r * ${{ env.OPENH264_TMP_DIR }}
        cd ${{ env.OPENH264_TMP_DIR }}
        mkdir -p ${{ env.BUILD_DIR }}
        sed -i "s*PREFIX=/usr/local*PREFIX=${LIB_PATH}/${{matrix.arch}}*g" Makefile
        sed -i 's/stlport_shared/c++_static/g' Makefile
        echo "finish sed Makefile" 
        export APP_STL=c++_static
        ARGS="VERBOSE=1 APP_PLATFORM=android-${{ env.TARGET_ANDROID_API }} OS=android NDKROOT=${{ env.ANDROID_NDK_HOME }} NDK_TOOLCHAIN_VERSION=clang NDKLEVEL=${{ env.OPENH264_TARGET_NDK_LEVEL }} "
        ARGS="${ARGS} TARGET=android-${{ env.TARGET_ANDROID_API }} ARCH="
        # Add final architecture dependent info
        if [ "${{matrix.arch}}" == "armeabi" ]
        then
            ARGS="${ARGS}arm APP_ABI=armeabi"
        elif [ "${{matrix.arch}}" == "armeabi-v7a" ]
        then
            ARGS="${ARGS}arm"
        elif [ "${{matrix.arch}}" == "x86" ]
        then
            ARGS="${ARGS}x86 ENABLEPIC=Yes"
        elif [ "${{matrix.arch}}" == "x86_64" ]
        then
            ARGS="${ARGS}x86_64"
        elif [ "${{matrix.arch}}" == "arm64-v8a" ]
        then
            ARGS="${ARGS}arm64"
        else
            echo "Unsupported target ABI: ${{matrix.arch}}"
            exit 1
        fi
        echo "make ${ARGS}"
        make ${ARGS}  
        mkdir -p ${LIB_PATH}/${{matrix.arch}}
        echo "make ${ARGS} install" 
        make ${ARGS} install 
      shell: bash
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openh264-${{ matrix.arch }}
        path: ${{ env.OPENH264_BUILD_OUT_PATH }}
        overwrite: true
