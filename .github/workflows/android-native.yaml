name: build native android libraries
on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
      
  pull_request:
    types: [opened, synchronize, reopened]  
    
  workflow_dispatch:
  
permissions:
  contents: read

env:
    BCG729_PATH:  ${{ github.workspace }}/lib/bcg729
    OPENH264_PATH: ${{ github.workspace }}/lib/openh264
    OPENSSL_PATH: ${{ github.workspace }}/lib/openssl
    OPUS_PATH: ${{ github.workspace }}/lib/opus
    PJSIP_PATH: ${{ github.workspace }}/lib/pjsip
    BUILD_DIR: ${{ github.workspace }}/outputs
    PJSIP_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/pjsip-build-output
    SWIG_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/swig-build-output
    OPENSSL_BUILD_OUT_PATH:  ${{ github.workspace }}/outputs/openssl-build-output
    OPENSSL_TARGET_NDK_LEVEL: 21
    OPENH264_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/openh264-build-output
    OPENH264_TARGET_NDK_LEVEL: 21
    OPUS_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/opus-build-output
    BCG729_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/bcg729-build-output
    ANDROID_BUILD_TOOLS: "34.0.0"
    TARGET_ANDROID_API: 21
    OPENH264_TMP_DIR: /tmp/openh264
jobs:
  third-part:
    strategy:
      matrix:
        arch: [x86, x86_64, armeabi-v7a, arm64-v8a]
    runs-on: ubuntu-latest
    name: third part libs
    permissions:
      contents: write
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: 'true'
           
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        check-latest: true
    
    - name: Set up Android SDK
      id: setup-android-sdk
      run: |
        # Define variables
        ANDROID_SDK_ROOT=$HOME/android-sdk
        CMDLINE_TOOLS_VERSION=11076708
        API_LEVEL=21
        BUILD_TOOLS_VERSION=34.0.0

        # Create directories
        # mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
        # mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/tools"
        # mkdir -p "$ANDROID_SDK_ROOT/platforms"
        # mkdir -p "$ANDROID_SDK_ROOT/build-tools"

        # Download and set up cmdline-tools
        curl -o sdk-tools.zip "https://dl.google.com/android/repository/commandlinetools-linux-${CMDLINE_TOOLS_VERSION}_latest.zip"
        unzip sdk-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools/tools"
        rm sdk-tools.zip

        # Add cmdline-tools to PATH
        echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/tools/bin:$ANDROID_SDK_ROOT/platform-tools:\$PATH" >> $GITHUB_ENV

        # Accept licenses
        yes | $ANDROID_SDK_ROOT/cmdline-tools/tools/bin/sdkmanager --licenses

        # Install platform-tools, platforms, and build-tools
        $ANDROID_SDK_ROOT/cmdline-tools/tools/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-${API_LEVEL}" \
          "build-tools;${BUILD_TOOLS_VERSION}"

        # Export paths to GITHUB_OUTPUT
        echo "android_sdk_root=$ANDROID_SDK_ROOT" >> $GITHUB_OUTPUT
        echo "cmdline_tools_path=$ANDROID_SDK_ROOT/cmdline-tools/tools/bin" >> $GITHUB_OUTPUT
        echo "platform_tools_path=$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_OUTPUT

    - name: Verify Android SDK installation
      run: |
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list
        ls $ANDROID_SDK_ROOT

    - name: Download and Setup Android NDK
      id: setup-ndk
      run: |
        echo "Downloading Android NDK r25c..."
        curl -L -o android-ndk.zip https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
        echo "Creating directory for NDK..."
        mkdir -p /opt/hostedtoolcache/ndk/r25c
        echo "Extracting Android NDK..."
        unzip android-ndk.zip -d /opt/hostedtoolcache/ndk/r25c
        export ANDROID_NDK_HOME=/opt/hostedtoolcache/ndk/r25c/android-ndk-r25c
        echo "NDK_HOME=$ANDROID_NDK_HOME"
        echo "ndk-path=$ANDROID_NDK_HOME" >> $GITHUB_OUTPUT
      shell: bash
 
     
    - name: Install build tools
      run: |
        DEPS="unzip git curl bzip2 binutils make autoconf openssl linux-libc-dev \
              libssl-dev libopus0 libpcre3 libpcre3-dev build-essential nasm python3 swig llvm clang"
        sudo sh -c "dpkg --add-architecture i386; apt-get update && apt-get install -y ${DEPS}"
      shell: bash

     
    - name: Build OpenH264
      id: openh264
      run: |
        
        LIB_PATH=${{ env.OPENH264_BUILD_OUT_PATH }}/libs
        LOG_PATH=${{ env.OPENH264_BUILD_OUT_PATH }}/logs 
        if [ -d "${{ env.OPENH264_TMP_DIR }}" ]; then
          echo "Directory ${{ env.OPENH264_BUILD_OUT_PATH }} exists. Removing..."
          rm -rf ${{ env.OPENH264_BUILD_OUT_PATH }}
        else
            echo "Directory ${{ env.OPENH264_BUILD_OUT_PATH }} does not exist. Skipping removal."
        fi
        mkdir -p "${LIB_PATH}"
        mkdir -p "${LOG_PATH}"
        if [ -d "${{ env.OPENH264_TMP_DIR }}" ]; then
          echo "Directory ${{ env.OPENH264_TMP_DIR }} exists. Removing..."
          rm -rf ${{ env.OPENH264_TMP_DIR }}
        else
            echo "Directory ${{ env.OPENH264_TMP_DIR }} does not exist. Skipping removal."
        fi
        mkdir -p ${{ env.OPENH264_TMP_DIR }}
        cd ${{ env.OPENH264_PATH }}
        cp -r * ${{ env.OPENH264_TMP_DIR }}
        cd ${{ env.OPENH264_TMP_DIR }}
        mkdir -p ${{ env.BUILD_DIR }}
        echo Ëœ"sedding makefile"
        sed -i "s*PREFIX=/usr/local*PREFIX=${LIB_PATH}/${{matrix.arch}}*g" Makefile
        #sed -i '/-gcc-toolchain.*GCC_TOOLCHAIN_PATH/d' ./build/platform-android.mk
        sed -e "/binaries: decdemo encdemo/ s/^#*/#/" -i ./build/platform-android.mk
        echo "finish sed Makefile" 
        export APP_STL="c++_static"
        ARGS="VERBOSE=1 APP_PLATFORM=android-${{ env.TARGET_ANDROID_API }} OS=android NDKROOT=${{ env.ANDROID_NDK_HOME }} NDK_TOOLCHAIN_VERSION=clang NDKLEVEL=${{ env.OPENH264_TARGET_NDK_LEVEL }} "
        ARGS="${ARGS} TARGET=android-${{ env.TARGET_ANDROID_API }} APP_STL=c++_static ARCH="
        # Add final architecture dependent info
        if [ "${{matrix.arch}}" == "armeabi" ]
        then
            ARGS="${ARGS}arm APP_ABI=armeabi"
        elif [ "${{matrix.arch}}" == "armeabi-v7a" ]
        then
            ARGS="${ARGS}arm"
            #export CFLAGS="-I/opt/hostedtoolcache/ndk/r25c/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/arm-linux-androideabi"
            #export LDFLAGS=""
        elif [ "${{matrix.arch}}" == "x86" ]
        then
            ARGS="${ARGS}x86 ENABLEPIC=Yes"
            #export CFLAGS="-I/opt/hostedtoolcache/ndk/r25c/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/i686-linux-android"
        elif [ "${{matrix.arch}}" == "x86_64" ]
            then
            ARGS="${ARGS}x86_64"
            #export CFLAGS="-I/opt/hostedtoolcache/ndk/r25c/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/x86_64-linux-android"
        elif [ "${{matrix.arch}}" == "arm64-v8a" ]
        then
            ARGS="${ARGS}arm64"
            #export CFLAGS="-I/opt/hostedtoolcache/ndk/r25c/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android"

        else
            echo "Unsupported target ABI: ${{matrix.arch}}"
            exit 1
        fi
        echo "make ${ARGS}"  
        #CFLAGS=" ${CFLAGS} --sysroot=/opt/hostedtoolcache/ndk/r25c/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/sysroot"       
        #CFLAGS="${CFLAGS} -I/opt/hostedtoolcache/ndk/r25c/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include"
        #export LDFLAGS=" -target $(TARGET_NAME) -L/opt/hostedtoolcache/ndk/r25c/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/x86_64-linux-android -lc -lm -lstdc++ -lgcc -lgcc_s"
        
        export SYSROOT="/opt/hostedtoolcache/ndk/r25c/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        export NDKROOT="/opt/hostedtoolcache/ndk/r25c/android-ndk-r25c"
        make ${ARGS} 


        mkdir -p ${LIB_PATH}/${{matrix.arch}}
        echo "make ${ARGS} install" 
        make ${ARGS} install 
      shell: bash
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}


    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openh264-${{ matrix.arch }}
        path: ${{ env.OPENH264_BUILD_OUT_PATH }}
        overwrite: true
