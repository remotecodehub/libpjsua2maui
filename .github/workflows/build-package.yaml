name: build nupkg
on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
    
  pull_request:
    types: [opened, synchronize, reopened]  
    
  workflow_dispatch:
  
permissions:
  contents: read

env:
    BCG729_PATH:  ${{ github.workspace }}/lib/bcg729
    OPENH264_PATH: ${{ github.workspace }}/lib/openh264
    OPENSSL_PATH: ${{ github.workspace }}/lib/openssl
    OPUS_PATH: ${{ github.workspace }}/lib/opus
    PJSIP_PATH: ${{ github.workspace }}/lib/pjsip
    MIN_IOS_VERSION: 12.2
    DOTNET_NOLOGO: true                     # Disable the .NET logo
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
    DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry
    PJSIP_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/pjsip-build-output
    SWIG_BUILD_OUT_PATH: ${{ github.workspace }}/outputs/swig-build-output    

jobs:
  openh264-ios:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: openh264-ios 
    permissions:
      contents: write
    steps:
       
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
         
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool 
      shell: sh
         
    - name: Build For all archs
      run: |
        cd ${{ env.OPENH264_PATH }}
        h264_makefile="Makefile"
        h264_makefile_bak="Makefile.bak"
        h264_prefix="${{ env.OPENH264_PATH }}/builds/${{ matrix.arch }}"
        h264_log="${h264_prefix}/build.log"
        mkdir -p "${h264_prefix}/logs"

        pushd . > /dev/null
  
        echo "Building h264 for ${{ matrix.arch }}"

        cp "${h264_makefile}" "${h264_makefile_bak}"
        h264_sed_src="^PREFIX=.*"
        h264_sed_dst="PREFIX=${h264_prefix}"
        h264_sed_dst="${h264_sed_dst//\//\\/}"
        sed -i.deleteme "s/${h264_sed_src}/${h264_sed_dst}/" "${h264_makefile}"
        rm ${h264_makefile}.deleteme
        echo "--- Run make file for ${{ matrix.arch }}"
        make OS=ios ARCH=${{ matrix.arch }} SDK_MIN=${{env.MIN_IOS_VERSION}} v=No >> "${h264_log}"  || exit
        make OS=ios ARCH=${{ matrix.arch }} SDK_MIN=${{env.MIN_IOS_VERSION}} v=No install >> "${h264_log}" || exit
        make OS=ios ARCH=${{ matrix.arch }} SDK_MIN=${{env.MIN_IOS_VERSION}} v=No clean >> "${h264_log}" || exit
        mv "${h264_makefile_bak}" "${h264_makefile}"
        popd > /dev/null
        
      shell: sh
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openh264-${{ matrix.arch }}
        path: ${{ env.OPENH264_PATH }}/builds/${{ matrix.arch }}/
        overwrite: true

  openssl-ios:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: openssl-ios 
    permissions:
      contents: write
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool 
      shell: sh
         
    - name: Build OpenSSL
      id: build
      run: |
        INCLUDE_DIR=""
        OPENSSLCONF_ALL=()
        LIBSSL_IOS=()
        LIBSSL_IOSSIM=()
        LIBCRYPTO_IOS=()
        LIBCRYPTO_IOSSIM=()
        export OPENSSL_LOCAL_CONFIG_DIR=${{ github.workspace }}/res/ssl/config
        export SDKVERSION
        export IOS_MIN_SDK_VERSION
        export TVOS_MIN_SDK_VERSION
        export WATCHOS_MIN_SDK_VERSION
        export CONFIG_DISABLE_BITCODE
        cd ${{ env.OPENSSL_PATH }}
        
        chmod u+x ./Configure
        # Determine platform
        if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            PLATFORM="iPhoneSimulator"
            TARGET="ios-sim-cross-x86_64"
        else
            TARGET="ios-cross-arm64"
            PLATFORM="iPhoneOS"
        fi
        
        
        # Extract ARCH from TARGET (part after last dash)
        #ARCH=$(echo "${TARGET}" | sed -E 's|^.*\-([^\-]+)$|\1|g')
        ARCH=${{ matrix.arch }}
        # Cross compile references, see Configurations/10-main.conf
        export CROSS_COMPILE="${{ env.DEVELOPER }}/Toolchains/XcodeDefault.xctoolchain/usr/bin/"
        export CROSS_TOP="${{ env.DEVELOPER }}/Platforms/${PLATFORM}.platform/Developer"
        export CROSS_SDK="${PLATFORM}${{ env.SDKVERSION }}.sdk"

        # Prepare TARGETDIR  
        TARGETDIR="${{ env.OPENSSL_PATH }}/bin/${PLATFORM}${{env.SDKVERSION}}-${{ matrix.arch }}.sdk"
        echo "artifact=${TARGETDIR}" >> "$GITHUB_OUTPUT"
        mkdir -p "${TARGETDIR}"
        ## Determine config options
        # Add build target, --prefix and prevent async (references to getcontext(),
        # setcontext() and makecontext() result in App Store rejections) and creation
        # of shared libraries (default since 1.1.0)
        LOCAL_CONFIG_OPTIONS="${TARGET} --prefix=${TARGETDIR} ${CONFIG_OPTIONS} no-async no-shared"

        # Only relevant for 64 bit builds
        # if [[ "${CONFIG_ENABLE_EC_NISTP_64_GCC_128}" == "true" && "${{ matrix.arch }}" == *64  ]]; then
        #     LOCAL_CONFIG_OPTIONS="${LOCAL_CONFIG_OPTIONS} enable-ec_nistp_64_gcc_128"
        # fi

        # Run Configure
        ./Configure ${LOCAL_CONFIG_OPTIONS} no-tests 

        # Run make
        echo "  Make (using ${{ env.BUILD_THREADS }} thread(s))..." 
        make -j "${{ env.BUILD_THREADS }}"  


        # Run make install
        set -e 
        make install_dev  

        # Remove source dir, add references to library files to relevant arrays
        # Keep reference to first build target for include file
        if [[ "${PLATFORM}" == iPhoneOS ]]; then
            LIBSSL_IOS+=("${TARGETDIR}/lib/libssl.a")
            LIBCRYPTO_IOS+=("${TARGETDIR}/lib/libcrypto.a")
            OPENSSLCONF_SUFFIX="ios_${{matrix.arch}}"
        elif [[ "${PLATFORM}" == iPhoneSimulator ]]; then
            LIBSSL_IOSSIM+=("${TARGETDIR}/lib/libssl.a")
            LIBCRYPTO_IOSSIM+=("${TARGETDIR}/lib/libcrypto.a")
            OPENSSLCONF_SUFFIX="ios_${{ matrix.arch }}"
        fi
      shell: sh
      env:
        SDKVERSION: 18.2
        IOS_MIN_SDK_VERSION: 12.2  
        CONFIG_DISABLE_BITCODE: true
        DEVELOPER: $(xcode-select -print-path)
        IOS_SDKVERSION: $(xcrun -sdk iphoneos --show-sdk-version)
        BUILD_THREADS: $(sysctl hw.ncpu | awk '{print $2}')
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openssl-${{ matrix.arch }}
        path: ${{ steps.build.outputs.artifact }}
        overwrite: true
      env:
        SDKVERSION: 18.2

  opus-ios:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: opus-ios 
    permissions:
      contents: write
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: 'true'
         
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
         
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool 
      shell: sh
         
    - name: Build opus
      id: build
      run: |
        opus_version="1.4"
        opus_opt_cflags="-Ofast -flto -g"
        opus_opt_ldflags="-flto"
        opus_opt_config_args=""
        DEVELOPER=`xcode-select -print-path`
        xcode_dev_path=`xcode-select -print-path`

        opus_repo_dir=${{ env.OPUS_PATH }}
        opus_output_dir="${opus_repo_dir}/dependencies"
        opus_build_build_dir="${opus_repo_dir}/build"
        opus_src_dir="${opus_repo_dir}/src"
        opus_inter_dir="${opus_build_build_dir}/built"

        mkdir -p "${opus_output_dir}/include"
        mkdir -p "${opus_output_dir}/lib" 
        mkdir -p $opus_inter_dir

        cd "${opus_repo_dir}"

        ccache=""
        
      
        echo "-- Opus: Compiling ${{ matrix.arch }}"
        opus_extra_cflags="-arch ${{ matrix.arch }}"
        if [ "${{ matrix.arch }}" == "i386" ] || [ "${{ matrix.arch }}" == "x86_64" ]; then
            os_platform="iPhoneSimulator"
            opus_extra_flags="--with-pic"
            opus_extra_config="--host=${{ matrix.arch }}-apple-darwin"
        else
            os_platform="iPhoneOS"
            opus_extra_config="--host=arm-apple-darwin"
        fi

        mkdir -p "${opus_inter_dir}/${os_platform}${{ env.SDKVERSION }}-${{ matrix.arch }}.sdk"
        echo "artifact=${opus_inter_dir}/${os_platform}${{ env.SDKVERSION }}-${{ matrix.arch }}.sdk" >> "$GITHUB_OUTPUT"
        
        ./autogen.sh
        
        ./configure \
            --enable-float-approx --disable-shared --enable-static \
            --with-pic --disable-extra-programs --disable-doc ${opus_extra_config} \
            --prefix="${opus_inter_dir}/${os_platform}${{ env.SDKVERSION }}-${{ matrix.arch }}.sdk" \
            ${opus_extra_config} \
            LDFLAGS="$LDFLAGS ${opus_opt_ldflags} -fPIE -miphoneos-version-min=${{env.MIN_IOS_VERSION}} -L${opus_output_dir}/lib" \
            CFLAGS="$CFLAGS ${opus_extra_cflags} ${opus_opt_cflags} -fPIE -miphoneos-version-min=${{env.MIN_IOS_VERSION}} -I${opus_output_dir}/include -isysroot ${xcode_dev_path}/Platforms/${os_platform}.platform/Developer/SDKs/${os_platform}.sdk" || exit

        make -j4 || exit

        make install || exit
 
      shell: sh
      env:
        SDKVERSION: 18.2
        IOS_MIN_SDK_VERSION: 12.2  
        CONFIG_DISABLE_BITCODE: true
        DEVELOPER: $(xcode-select -print-path)
        IOS_SDKVERSION: $(xcrun -sdk iphoneos --show-sdk-version)
        BUILD_THREADS: $(sysctl hw.ncpu | awk '{print $2}')
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opus-${{ matrix.arch }}
        path: ${{ steps.build.outputs.artifact }}
        overwrite: true
      env:
        SDKVERSION: 18.2
    
  bcg729-ios:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: bcg729-ios 
    permissions:
        contents: write
    steps:
        
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
                
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
            
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool 
      shell: sh
            
    - name: Build bcg729 for iOS
      id: build
      run: |
          echo "Building BCG729 for iOS"
          xcode_dev_path=$(xcode-select -print-path)

          cd ${{ env.BCG729_PATH }}

          echo "-- Compiling for ${{ matrix.arch }}"
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
              os_platform="iPhoneSimulator"
              C_FLAGS="$C_FLAGS -O2 -m64 -mios-simulator-version-min=${{ env.MIN_IOS_VERSION }} -isysroot ${xcode_dev_path}/Platforms/${os_platform}.platform/Developer/SDKs/${os_platform}.sdk"
          else
              os_platform="iPhoneOS"
              C_FLAGS="$C_FLAGS -O2 -miphoneos-version-min=${{ env.MIN_IOS_VERSION }} -isysroot ${xcode_dev_path}/Platforms/${os_platform}.platform/Developer/SDKs/${os_platform}.sdk"
          fi
 
          rm -rf "${{ env.BCG729_PATH }}/${os_platform}${{ env.MIN_IOS_VERSION }}-${{ matrix.arch }}.sdk" 
          rm -rf "${{ env.BCG729_PATH }}/CMakeFiles" "${{ env.BCG729_PATH }}/CMakeCache.txt"

          # Criar diretório de instalação
          mkdir -p "${os_platform}${{ env.MIN_IOS_VERSION }}-${{ matrix.arch }}.sdk"

          # Executar o CMake com configurações específicas para iOS
          cmake -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="${os_platform}${{ env.MIN_IOS_VERSION }}-${{ matrix.arch }}.sdk" \
                -DCMAKE_SKIP_INSTALL_RPATH="ON" \
                -DCMAKE_MAKE_PROGRAM:PATH=$(which make) \
                -DCMAKE_C_COMPILER=$(which clang) \
                -DCMAKE_OSX_SYSROOT="${xcode_dev_path}/Platforms/${os_platform}.platform/Developer/SDKs/${os_platform}.sdk" \
                .

          # Compilar e instalar
          make || exit 1
          make install

          echo "artifact=${{ env.BCG729_PATH }}/${os_platform}${{ env.MIN_IOS_VERSION }}-${{ matrix.arch }}.sdk/" >> "$GITHUB_OUTPUT"

    - name: Upload artifactss
      uses: actions/upload-artifact@v4
      with:
        name: bcg729-${{ matrix.arch }}
        path: ${{ steps.build.outputs.artifact }}
        overwrite: true
      env:
        SDKVERSION: 18.2
 
  pjsip-ios:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: self-hosted
    needs: [bcg729-ios, openh264-ios, openssl-ios, opus-ios]
    name: pjsip + h264 + bcg729 + opus + ssl - ios
    permissions:
        contents: write
    steps:
        
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
                
    - uses: actions/download-artifact@v4
      with:
        name: openssl-${{ matrix.arch }}
        path: ${{ github.workspace }}/libs/ssl/
       
    - uses: actions/download-artifact@v4
      with:
        name: openh264-${{ matrix.arch }}
        path: ${{ github.workspace }}/libs/h264/
        
    - uses: actions/download-artifact@v4
      with:
        name: opus-${{ matrix.arch }}
        path: ${{ github.workspace }}/libs/opus/
        
    - uses: actions/download-artifact@v4
      with:
        name: bcg729-${{ matrix.arch }}
        path: ${{ github.workspace }}/libs/bcg729/
        
    - name: Install dependencies
      run: |
        brew install automake autoconf libtool pkg-config swig
        if [ "${{ matrix.ARCH }}" == "x86_64" ]; then
          brew install llvm
        fi

    - name: Build pjsip
      id: build-pj-ios
      run: |
        cp -v -f ${{ github.workspace }}/res/pj/config_site.h ${{ env.PJSIP_PATH }}/pjlib/include/pj/config_site.h
        
        mkdir -p ~/pjsip_build/bundle/${{ matrix.arch }}

        cp -r -v ${{ env.PJSIP_PATH }} ~/pjsip_build/bundle/${{ matrix.arch }}
        cd ~/pjsip_build/bundle/${{ matrix.arch }}/pjsip

        if [ "${{ matrix.arch }}" == "x86_64" ]; then
          export DEVPATH="$(xcode-select -p)/Platforms/iPhoneSimulator.platform/Developer"
          export ISYSROOT=$(xcode-select -p)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk
          export SDKROOT=$(xcode-select -p)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk
          echo $DEVPATH
          echo $ISYSROOT
            
          export CFLAGS="-arch ${{ matrix.arch }} -O2 -m64 -mios-simulator-version-min=${{ env.MIN_IOS_VERSION }} -I${{ github.workspace }}/libs/bcg729/include -I${{ github.workspace }}/libs/ssl/include -I${{ github.workspace }}/libs/opus/include -I${{ github.workspace }}/libs/h264/include"
          export LDFLAGS="-arch ${{ matrix.arch }} -O2 -m64 -mios-simulator-version-min=${{ env.MIN_IOS_VERSION }} -L${{ github.workspace }}/libs/bcg729/lib -L${{ github.workspace }}/libs/ssl/lib -L${{ github.workspace }}/libs/opus/lib -L${{ github.workspace }}/libs/h264/lib"
          export MIN_IOS="-mios-simulator-version-min=${{ env.MIN_IOS_VERSION }}"
           
          echo "calling configure-iphone"

          ARCH="-arch x86_64" ./configure-iphone --with-bcg729=${{ github.workspace }}/libs/bcg729/ --with-ssl=${{ github.workspace }}/libs/ssl/ --with-opus=${{ github.workspace }}/libs/opus/ --with-openh264=${{ github.workspace }}/libs/h264/  
          #cat *config.log
          echo "make dep"
          make dep  --debug
          echo "make"
          make  
        else
            
          export DEVPATH="$(xcode-select -p)/Platforms/iPhoneOS.platform/Developer"
          echo $DEVPATH
          export SDKROOT=$(xcode-select -p)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk
          
          export CFLAGS="-arch ${{ matrix.arch }} -miphoneos-version-min=${{ env.MIN_IOS_VERSION  }} "
          export LDFLAGS="-arch ${{ matrix.arch }}"
          export MIN_IOS="-miphoneos-version-min=${{ env.MIN_IOS_VERSION  }}"    

          export CFLAGS+=" -I${{ github.workspace }}/libs/bcg729/include -I${{ github.workspace }}/libs/ssl/include -I${{ github.workspace }}/libs/opus/include -I${{ github.workspace }}/libs/h264/include"
          export LDFLAGS+=" -L${{ github.workspace }}/libs/bcg729/lib -L${{ github.workspace }}/libs/ssl/lib -L${{ github.workspace }}/libs/opus/lib -L${{ github.workspace }}/libs/h264/lib"
            
          #export LDFLAGS="${LDFLAGS} -L$(find /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs -name AudioUnit.framework -print0 | xargs -0 dirname) -framework AudioUnit"

          #export CC=`which clang`
          #export CXX=`which clang++`
          echo $CC
          echo $CXX
           
          ARCH="-arch arm64" ./configure-iphone --with-bcg729=${{ github.workspace }}/libs/bcg729/ --with-ssl=${{ github.workspace }}/libs/ssl/ --with-opus=${{ github.workspace }}/libs/opus/ --with-openh264=${{ github.workspace }}/libs/h264/   || cat *config.log
          cat *config.log
          
          

          make dep

          make 
        fi
        

        cd ./pjsip-apps/src/swig 

        sed -i'' -e 's/xamarin/maui/g' ./csharp/Makefile
        
        make 

        mkdir -p ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        mkdir -p ${{ github.workspace }}/pjsip-${{matrix.arch}}/cs

        cp -v -f ${{ github.workspace }}/libs/ssl/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        cp -v -f ${{ github.workspace }}/libs/opus/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        cp -v -f ${{ github.workspace }}/libs/bcg729/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        cp -v -f ${{ github.workspace }}/libs/h264/lib/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib
        cp -v -f ./csharp/pjsua2maui/pjsua2maui.iOS/lib/${{ matrix.arch }}/*.a ${{ github.workspace }}/pjsip-${{matrix.arch}}/lib

        cp -v -f ./csharp/pjsua2maui/pjsua2maui/pjsua2/*.cs ${{ github.workspace }}/pjsip-${{matrix.arch}}/cs

        echo "artifact=${{ github.workspace }}/pjsip-${{matrix.arch}}" >> "$GITHUB_OUTPUT"

    - name: Upload artifactss
      uses: actions/upload-artifact@v4
      with:
        name: pjsip-${{ matrix.arch }}
        path: ${{ steps.build-pj-ios.outputs.artifact }}
        overwrite: true
      env:
        SDKVERSION: 18.2

  openh264:
    runs-on: ubuntu-latest
    
    steps:
       
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Output Directory
        run: mkdir -p ${{ github.workspace }}/libopenh264-output

      - name: Set Permissions for Output Directory
        run: chmod -R 777 ${{ github.workspace }}/libopenh264-output

      - name: Build Docker Image
        run: |
          docker build -t openh264-builder ${{ github.workspace }}/res/docker/openh264

      - name: Run Docker Container 
        run: | 
          docker run --name openh264-build openh264-builder
          
      - name: Extract Artifacts from Container
        run: | 
          docker cp openh264-build:/root/outputs/libs ${{ github.workspace }}/libopenh264-output
           
      - name: Upload OpenH264 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openh264-android
          path: ${{ github.workspace }}/libopenh264-output
          overwrite: true
  
  openssl:
    runs-on: ubuntu-latest
    
    steps:
        
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Output Directory
        run: mkdir -p ${{ github.workspace }}/openssl-output

      - name: Set Permissions for Output Directory
        run: chmod -R 777 ${{ github.workspace }}/openssl-output

      - name: Build Docker Image
        run: |
          docker build -t openssl-builder ${{ github.workspace }}/res/docker/openssl
        
      - name: Run Docker Container and Extract Artifacts
        run: |  
          docker run --name openssl-build openssl-builder
      
      - name: Extract Artifacts from Container
        run: |  
          docker cp openssl-build:/root/outputs/libs ${{ github.workspace }}/openssl-output
          

      - name: Upload openssl Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openssl-android
          path: ./openssl-output
          overwrite: true

  bcg729:
    runs-on: ubuntu-latest
    
    steps:
        
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Output Directory
        run: mkdir -p ${{ github.workspace }}/bcg729-output

      - name: Set Permissions for Output Directory
        run: chmod -R 777 ${{ github.workspace }}/bcg729-output

      - name: Build Docker Image
        run: |
          docker build -t bcg729-builder ${{ github.workspace }}/res/docker/bcg729
        
      - name: Run Docker Container 
        run: |
          docker run --name bcg729-build bcg729-builder
          
      - name: Extract Artifacts from Container
        run: |
          docker cp bcg729-build:/root/outputs/libs ${{ github.workspace }}/bcg729-output
 
      - name: Upload bcg729 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bcg729-android
          path: ./bcg729-output 
          overwrite: true

  opus:
    runs-on: ubuntu-latest
      
    steps:
          
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Create Output Directory
        run: mkdir -p ${{ github.workspace }}/opus-output

      - name: Set Permissions for Output Directory
        run: chmod -R 777 ${{ github.workspace }}/opus-output

      - name: Build Docker Image
        run: |
          docker build -t opus-builder ${{ github.workspace }}/res/docker/opus
          
      - name: Run Docker Container
        run: docker run --name opus-build opus-builder
        
      - name: Extract Artifacts from Container
        run: | 
          docker cp opus-build:/root/outputs/ ${{ github.workspace }}/opus-output

      - name: Upload opus Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: opus-android
          path: ${{ github.workspace }}/opus-output 
          overwrite: true
           
  pjsip-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86, x86_64, armeabi-v7a, arm64-v8a]
      fail-fast: false
    needs: [bcg729, openh264, openssl, opus]
    name: pjsip + h264 + bcg729 + opus + ssl - android
    permissions:
        contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
        
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        check-latest: true
      
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708 
        packages: platforms;android-28 tools platform-tools build-tools;34.0.0
    
    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r28
        add-to-path: true
        link-to-sdk: true
      
    - name: Debug NDK
      shell: bash
      run: |
        ls -R $ANDROID_NDK_HOME
      env: 
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

    - name: Prepare Environment
      run: |
        cd ${{ github.workspace }}
        sudo mkdir -p /home/runner/libpjsua2 
        
        DEPS="unzip git curl bzip2 binutils make autoconf openssl \
          libssl-dev libopus0 libpcre3 libpcre3-dev build-essential nasm python3 swig libstdc++6 \
          libpthread-stubs0-dev \
          libc6-dev"
        sudo sh -c "dpkg --add-architecture i386; apt-get update  && apt-get install -y ${DEPS}"
    
    - uses: actions/download-artifact@v4
      with:
        name: openssl-android
        path: ${{ github.workspace }}/output/openssl
      
    - uses: actions/download-artifact@v4
      with:
        name: openh264-android
        path: ${{ github.workspace }}/output/openh264/
        
    - uses: actions/download-artifact@v4
      with:
        name: opus-android
        path: ${{ github.workspace }}/output/opus/
        
    - uses: actions/download-artifact@v4
      with:
        name: bcg729-android
        path: ${{ github.workspace }}/output/bcg729/
       
    - name: Create config_site.h
      run: |
        echo "Creating config site file for Android ..."
        echo "#define PJ_CONFIG_ANDROID 1" > ${{ env.CONFIG_SITE_PATH }}
        echo "#define PJMEDIA_HAS_G7221_CODEC 1" >> ${{ env.CONFIG_SITE_PATH }}
        echo "#define PJMEDIA_AUDIO_DEV_HAS_ANDROID_JNI 0" >> ${{ env.CONFIG_SITE_PATH }}
        echo "#define PJMEDIA_AUDIO_DEV_HAS_OPENSL 1" >> ${{ env.CONFIG_SITE_PATH }}
        echo "#define PJSIP_AUTH_AUTO_SEND_NEXT 0" >> ${{ env.CONFIG_SITE_PATH }}
        echo "#define PJMEDIA_HAS_OPUS_CODEC 1" >> ${{ env.CONFIG_SITE_PATH }} 
        echo "Changing PJSIP_MAX_PKT_LEN to 6000"
        echo "#define PJSIP_MAX_PKT_LEN 6000" >> ${{ env.CONFIG_SITE_PATH }}
        echo "Enabling BCG729 in config_site"
        echo "#define PJMEDIA_HAS_BCG729 1" >> ${{ env.CONFIG_SITE_PATH }}
        echo "Enabling Video support in config_site"
        echo "#define PJMEDIA_HAS_VIDEO 1" >> ${{ env.CONFIG_SITE_PATH }}
        echo "#include <pj/config_site_sample.h>" >> ${{ env.CONFIG_SITE_PATH }}
        sed -i'' -e 's/xamarin/maui/g' ${{ env.PJSIP_PATH }}/pjsip-apps/src/swig/csharp/Makefile

    - name: Build
      id: build-pj
      run: |
        cd ${{ env.PJSIP_PATH }}
        mkdir -p ${{ env.PJSIP_TMP_PATH }} 
        cp -r * ${{ env.PJSIP_TMP_PATH }}
        cd  ${{ env.PJSIP_TMP_PATH }}
        echo "Configuring for ${{ matrix.arch }}"
        APP_PLATFORM=android-${{ env.TARGET_ANDROID_API }} TARGET_ABI=${{ matrix.arch }} ./configure-android --use-ndk-cflags --with-ssl=${{ env.OPENSSL_BUILD_OUT_PATH }}/libs/${{ matrix.arch }} --with-openh264=${{ env.OPENH264_BUILD_OUT_PATH }}/libs/${{ matrix.arch }} --with-opus=${{ env.OPUS_BUILD_OUT_PATH }}/${{ matrix.arch }} --with-bcg729=${{ env.BCG729_BUILD_OUT_PATH }}/libs/${{ matrix.arch}}
        echo "Make dep"
        make dep
        echo ""
        echo "make"
        make
        cd ${{ env.PJSUA_BASE_DIR }}
        make
        mkdir -p ${{ env.PJSIP_BUILD_OUT_PATH }}/${{ matrix.arch }}
        mkdir -p ${{ env.PJSIP_BUILD_OUT_PATH }}/csharp
        mkdir -p ${{ env.PJSIP_BUILD_OUT_PATH }}/java

        mv ${{ env.PJSUA_GENERATED_SO_PATH }}/*/* ${{ env.PJSIP_BUILD_OUT_PATH }}/${{ matrix.arch }}
        cp ${{ github.workspace }}/output/openh264/libs/${{ matrix.arch }}/lib/libopenh264.so ${{ env.PJSIP_BUILD_OUT_PATH }}/${{ matrix.arch }}
        cp ${{ github.workspace }}/output/openssl/libs/${{ matrix.arch }}/lib/libssl.so ${{ env.PJSIP_BUILD_OUT_PATH }}/${{ matrix.arch }}
        cp ${{ github.workspace }}/output/openssl/libs/${{ matrix.arch }}/lib/libcrypto.so ${{ env.PJSIP_BUILD_OUT_PATH }}/${{ matrix.arch }}
        cp -r -v ${{ env.PJSUA_GENERATED_SO_DIR }}/${{ matrix.arch }}/*  ${{ env.PJSIP_BUILD_OUT_PATH }}/${{ matrix.arch }}
        cp -r -v ${{ env.PJSUA_GENERATED_JAVA_SRC_DIR }} ${{ env.PJSIP_BUILD_OUT_PATH }}/java
        cp -r -v ${{ env.PJSUA_GENERATED_CSHARP_DIR }} ${{ env.PJSIP_BUILD_OUT_PATH }}/csharp
        echo "artifact=${{ env.PJSIP_BUILD_OUT_PATH }}/${{matrix.arch}}" >> "$GITHUB_OUTPUT"
        echo "csharp=${{ env.PJSIP_BUILD_OUT_PATH }}/csharp" >> "$GITHUB_OUTPUT"
        echo "java=${{ env.PJSIP_BUILD_OUT_PATH }}/java" >> "$GITHUB_OUTPUT"
      env:
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}

    - name: Upload pjsip artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pjsip-android-${{ matrix.arch }}
        path: ${{ steps.build-pj.outputs.artifact }}
        overwrite: true

    - name: Upload csharp artifacts
      uses: actions/upload-artifact@v4
      with:
        name: csharp
        path: ${{ steps.build-pj.outputs.csharp }}
        overwrite: true
  
    - name: Upload java artifacts
      uses: actions/upload-artifact@v4
      with:
        name: java
        path: ${{ steps.build-pj.outputs.java }}
        overwrite: true

    env:
      OPENSSL_LIB_PATH: ${{ github.workspace }}/output/openssl/libs/
      OPENh264_LIB_PATH: ${{ github.workspace }}/output/openh264/libs/
      OPUS_LIB_PATH: ${{ github.workspace }}/output/opus/libs/
      BCG729_LIB_PATH: ${{ github.workspace }}/output/bcg729/libs/
      PJSIP_TMP_PATH: /tmp/pjsip
      CONFIG_SITE_PATH: ${{ github.workspace }}/lib/pjsip/pjlib/include/pj/config_site.h
      PJSUA_GENERATED_CSHARP_DIR: /tmp/pjsip/pjsip-apps/src/swig/csharp/pjsua2maui/pjsua2maui/pjsua2
      PJSUA_GENERATED_JAVA_SRC_DIR: /tmp/pjsip/pjsip-apps/src/swig/java/android/pjsua2/src/main/java
      PJSUA_GENERATED_SO_PATH: /tmp/pjsip/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs
      PJSUA_GENERATED_SO_DIR: /tmp/pjsip/pjsip-apps/src/swig/csharp/pjsua2maui/pjsua2maui.Android/lib
      PJSUA_BASE_DIR: /tmp/pjsip/pjsip-apps/src/swig
      TARGET_ANDROID_API: 28
      OPENSSL_BUILD_OUT_PATH: ${{ github.workspace }}/output/openssl
      OPENH264_BUILD_OUT_PATH: ${{ github.workspace}}/output/openh264
      OPUS_BUILD_OUT_PATH: ${{ github.workspace }}/output/opus/outputs
      BCG729_BUILD_OUT_PATH: ${{ github.workspace }}/output/bcg729

  build-nupkg:
    runs-on: macos-latest
    name: build-nupkg
    needs: [pjsip-android, pjsip-ios]
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x

      - name: Install MAUI Workload
        run: dotnet workload install maui --ignore-failed-sources
        
      - uses: actions/setup-java@v2
        with:
          distribution: 'microsoft'
          java-version: '17'
          
      - name: Download Android x86 Artifact
        uses: actions/download-artifact@v4
        with:
          name: pjsip-android-x86
          path: ./artifacts/android-x86
      
      - name: Download Android x86_64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: pjsip-android-x86_64
          path: ./artifacts/android-x86_64
          
      - name: Download Android arm Artifact
        uses: actions/download-artifact@v4
        with:
          name: pjsip-android-armeabi-v7a
          path: ./artifacts/android-armeabi-v7a
      
      - name: Download Android arm64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: pjsip-android-arm64-v8a
          path: ./artifacts/android-arm64-v8a

      - name: Download Android java Artifact
        uses: actions/download-artifact@v4
        with:
          name: java
          path: ./artifacts/java
      
      - name: Download Android csharp Artifact
        uses: actions/download-artifact@v4
        with:
          name: csharp
          path: ./artifacts/android/csharp
      
      - name: Download ios Artifacts
        uses: actions/download-artifact@v4
        with:
          name: pjsip-x86_64
          path: ./artifacts/ios/pjsip-x86_64
      
      - name: Download ios arm64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: pjsip-arm64
          path: ./artifacts/ios/pjsip-arm64

      - name: Prepare Dirs
        run: |
          mkdir -p ${{ github.workspace }}/src/libpjsua2.maui.android/org/pjsip
          mkdir -p ${{ github.workspace }}/src/libpjsua2.maui.android/pjsua2
          mkdir -p ${{ github.workspace }}/src/libpjsua2.so/lib/x86
          mkdir -p ${{ github.workspace }}/src/libpjsua2.so/lib/x86_64
          mkdir -p ${{ github.workspace }}/src/libpjsua2.so/lib/armeabi-v7a
          mkdir -p ${{ github.workspace }}/src/libpjsua2.so/lib/arm64-v8a
          mkdir -p ${{ github.workspace }}/src/libpjsua2.so/lib/org/pjsip
          mkdir -p ${{ github.workspace }}/src/libpjsua2.maui.ios/pjsua2
          mkdir -p ${{ github.workspace }}/src/libpjsua2.a/lib/arm64
          mkdir -p ${{ github.workspace }}/src/libpjsua2.a/lib/x86_64
          mv ${{ github.workspace }}/artifacts/java/java/org/pjsip/*.java ${{ github.workspace }}/src/libpjsua2.maui.android/org/pjsip/
          mkdir -p ${{ github.workspace }}/src/libpjsua2.so/lib/org/pjsip
          cp -r -v ${{ github.workspace }}/src/libpjsua2.maui.android/org/pjsip/ ${{ github.workspace }}/src/libpjsua2.so/lib/org/pjsip 
          mv ${{ github.workspace }}/artifacts/android/csharp/pjsua2/* ${{ github.workspace }}/src/libpjsua2.maui.android/pjsua2
          mv ${{ github.workspace }}/artifacts/android-x86/* ${{ github.workspace }}/src/libpjsua2.so/lib/x86
          mv ${{ github.workspace }}/artifacts/android-x86_64/* ${{ github.workspace }}/src/libpjsua2.so/lib/x86_64
          mv ${{ github.workspace }}/artifacts/android-armeabi-v7a/* ${{ github.workspace }}/src/libpjsua2.so/lib/armeabi-v7a
          mv ${{ github.workspace }}/artifacts/android-arm64-v8a/* ${{ github.workspace }}/src/libpjsua2.so/lib/arm64-v8a
          mv ${{ github.workspace }}/artifacts/ios/pjsip-x86_64/lib/* ${{ github.workspace }}/src/libpjsua2.a/lib/x86_64
          mv ${{ github.workspace }}/artifacts/ios/pjsip-arm64/lib/* ${{ github.workspace }}/src/libpjsua2.a/lib/arm64
          mv ${{ github.workspace }}/artifacts/ios/pjsip-arm64/cs/* ${{ github.workspace }}/src/libpjsua2.maui.ios/pjsua2
          cd  ${{ github.workspace }}/src/libpjsua2.a/lib/x86_64
          libtool -static -o libpjsua2.a libbcg729.a libcrypto.a libssl.a libopenh264.a libopus.a libpjsua2.a
          rm -rf libbcg729.a libcrypto.a libssl.a libopenh264.a libopus.a
          cd ${{ github.workspace }}/src/libpjsua2.a/lib/arm64
          libtool -static -o libpjsua2.a libbcg729.a libcrypto.a libssl.a libopenh264.a libopus.a libpjsua2.a
          rm -rf libbcg729.a libcrypto.a libssl.a libopenh264.a libopus.a
          
      - name: Restore Dependencies
        run: | 
          dotnet restore src/libpjsua2maui.android/libpjsua2maui.android.csproj
          dotnet restore src/libpjsua2maui.ios/libpjsua2maui.ios.csproj

      - name: Build MAUI Android
        run: dotnet publish src/libpjsua2maui.android/libpjsua2.maui.android.csproj -c Release -f net9.0-android --no-restore
        
      - name: Build MAUI iOS
        run: dotnet publish src/libpjsua2maui.ios/libpjsua2.maui.ios.csproj -c Release -f net9.0-ios --no-restore
      
      - name: Set VERSION variable
        run: echo "VERSION=2.15.1.1" >> $GITHUB_ENV
      
      - name: Pack
        run: nuget pack src/libpjsua2maui.nuspec -version "${VERSION}"
      
      - name: Push to nuget
        run: dotnet nuget push libpjsua2maui.${VERSION}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${API_KEY} --skip-duplicate
        env:
          API_KEY: ${{ secrets.API_KEY }}