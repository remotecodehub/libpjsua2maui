on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'
      
  pull_request:
    types: [opened, synchronize, reopened]  
    
  workflow_dispatch:
  
permissions:
  contents: read

env:
    BCG729_PATH:  ${{ github.workspace }}/lib/bcg729
    OPENH264_PATH: ${{ github.workspace }}/lib/openh264
    OPENSSL_PATH: ${{ github.workspace }}/lib/openssl
    OPUS_PATH: ${{ github.workspace }}/lib/opus
    PJSIP_PATH: ${{ github.workspace }}/lib/pjsip
    MIN_IOS_VERSION: 12.2

jobs:
  openh264:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: Build OpenH264 
    permissions:
      contents: write
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: 'true'
         
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
         
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool swig
      shell: sh
         
    - name: Build For all archs
      run: |
        cd ${{ env.OPENH264_PATH }}
        h264_makefile="Makefile"
        h264_makefile_bak="Makefile.bak"
        h264_prefix="${{ env.OPENH264_PATH }}/builds/${{ matrix.arch }}"
        h264_log="${h264_prefix}/build.log"
        mkdir -p "${h264_prefix}/logs"

        pushd . > /dev/null
  
        echo "Building h264 for ${{ matrix.arch }}"

        cp "${h264_makefile}" "${h264_makefile_bak}"
        h264_sed_src="^PREFIX=.*"
        h264_sed_dst="PREFIX=${h264_prefix}"
        h264_sed_dst="${h264_sed_dst//\//\\/}"
        sed -i.deleteme "s/${h264_sed_src}/${h264_sed_dst}/" "${h264_makefile}"
        rm ${h264_makefile}.deleteme
        echo "--- Run make file for ${{ matrix.arch }}"
        make OS=ios ARCH=${{ matrix.arch }} SDK_MIN=${{env.MIN_IOS_VERSION}} v=No >> "${h264_log}"  || exit
        make OS=ios ARCH=${{ matrix.arch }} SDK_MIN=${{env.MIN_IOS_VERSION}} v=No install >> "${h264_log}" || exit
        make OS=ios ARCH=${{ matrix.arch }} SDK_MIN=${{env.MIN_IOS_VERSION}} v=No clean >> "${h264_log}" || exit
        mv "${h264_makefile_bak}" "${h264_makefile}"
        popd > /dev/null
        
      shell: sh
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openssl-${{ matrix.arch }}
        path: ${{ env.OPENH264_PATH }}/builds/${{ matrix.arch }}/

  openssl:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-latest
    name: Build OpenSSL 
    permissions:
      contents: write
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: 'true'
         
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
         
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install deps
      run: |
        brew install nasm autoconf automake libtool swig
      shell: sh
         
    - name: Build For all archs
      run: |
        INCLUDE_DIR=""
        OPENSSLCONF_ALL=()
        LIBSSL_IOS=()
        LIBSSL_IOSSIM=()
        LIBCRYPTO_IOS=()
        LIBCRYPTO_IOSSIM=()
        export OPENSSL_LOCAL_CONFIG_DIR=${{ github.workspace }}/res/ssl/config
        cd ${{ env.OPENSSL_PATH }}
        
        chmod u+x ./Configure
        # Determine platform
        if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            PLATFORM="iPhoneSimulator"
            TARGET="ios-sim-cross-x86_64"
        else
            TARGET="ios-cross-arm64"
            PLATFORM="iPhoneOS"
        fi
        
        
        # Extract ARCH from TARGET (part after last dash)
        #ARCH=$(echo "${TARGET}" | sed -E 's|^.*\-([^\-]+)$|\1|g')
        ARCH=${{ matrix.arch }}
        # Cross compile references, see Configurations/10-main.conf
        CROSS_COMPILE="${{ env.DEVELOPER}}/Toolchains/XcodeDefault.xctoolchain/usr/bin/"
        CROSS_TOP="${{ env.DEVELOPER }}/Platforms/${PLATFORM}.platform/Developer"
        CROSS_SDK="${PLATFORM}${{env.SDKVERSION}}.sdk"

        # Prepare TARGETDIR  
        TARGETDIR="${{ env.OPENSSL_PATH}}/bin/${PLATFORM}${{env.SDKVERSION}}-${{ matrix.arch }}.sdk"
        mkdir -p "${TARGETDIR}"
        ## Determine config options
        # Add build target, --prefix and prevent async (references to getcontext(),
        # setcontext() and makecontext() result in App Store rejections) and creation
        # of shared libraries (default since 1.1.0)
        LOCAL_CONFIG_OPTIONS="${TARGET} --prefix=${TARGETDIR} ${CONFIG_OPTIONS} no-async no-shared"

        # Only relevant for 64 bit builds
        # if [[ "${CONFIG_ENABLE_EC_NISTP_64_GCC_128}" == "true" && "${ARCH}" == *64  ]]; then
        #     LOCAL_CONFIG_OPTIONS="${LOCAL_CONFIG_OPTIONS} enable-ec_nistp_64_gcc_128"
        # fi

        # Run Configure
        ./Configure ${LOCAL_CONFIG_OPTIONS} no-tests 

        # Run make
        echo "  Make (using ${{ env.BUILD_THREADS }} thread(s))..." 
        make -j "${{ env.BUILD_THREADS }}"  


        # Run make install
        set -e 
        make install_dev  

        # Remove source dir, add references to library files to relevant arrays
        # Keep reference to first build target for include file
        if [[ "${PLATFORM}" == iPhoneOS ]]; then
            LIBSSL_IOS+=("${TARGETDIR}/lib/libssl.a")
            LIBCRYPTO_IOS+=("${TARGETDIR}/lib/libcrypto.a")
            OPENSSLCONF_SUFFIX="ios_${{matrix.arch}}"
        elif [[ "${PLATFORM}" == iPhoneSimulator ]]; then
            LIBSSL_IOSSIM+=("${TARGETDIR}/lib/libssl.a")
            LIBCRYPTO_IOSSIM+=("${TARGETDIR}/lib/libcrypto.a")
            OPENSSLCONF_SUFFIX="ios_${{ matrix.arch }}"
        fi
      shell: sh
      env:
        SDKVERSION: 18.1
        IOS_MIN_SDK_VERSION: 12.2  
        CONFIG_DISABLE_BITCODE: true
        DEVELOPER: $(xcode-select -print-path)
        IOS_SDKVERSION: $(xcrun -sdk iphoneos --show-sdk-version)
        BUILD_THREADS: $(sysctl hw.ncpu | awk '{print $2}')
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openssl-${{ matrix.arch }}
        path: ${{ env.OPENSSL_PATH}}/bin/iPhone*${{env.SDKVERSION}}-${{ matrix.arch }}.sdk
      env:
        SDKVERSION: 18.1